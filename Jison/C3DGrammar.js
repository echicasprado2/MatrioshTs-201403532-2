/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var C3DGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,18],$V2=[1,28],$V3=[1,29],$V4=[1,30],$V5=[1,31],$V6=[1,17],$V7=[1,15],$V8=[1,22],$V9=[1,20],$Va=[1,21],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[1,27],$Vg=[5,17,21,24,25,26,27,28,31,41,42,43,44,45,48,51,52,53],$Vh=[1,38],$Vi=[1,39],$Vj=[1,40],$Vk=[1,41],$Vl=[1,42],$Vm=[1,50],$Vn=[1,49],$Vo=[1,48],$Vp=[1,53],$Vq=[1,51],$Vr=[1,52],$Vs=[1,54],$Vt=[1,55],$Vu=[1,47],$Vv=[1,46],$Vw=[17,19,41,42,43,44,45],$Vx=[20,30,36,39],$Vy=[1,84],$Vz=[1,82],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[1,78],$VF=[1,79],$VG=[1,80],$VH=[1,81],$VI=[1,83],$VJ=[19,20,32,34,55,56,57,58,59,60,61,62,63],$VK=[1,92],$VL=[19,20,32,34,55,56,60,61,62,63],$VM=[19,20,60,61],$VN=[19,20,34,60,61,62],$VO=[19,20,32,34,38,55,56,57,58,59,60,61,62,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"SENTENCES":4,"EOF":5,"SENTENCE":6,"IMPORT":7,"DECLARATION":8,"FUNCION":9,"PRINT":10,"RETURN":11,"CALLFUNCION":12,"ASSIGNMENT":13,"IF":14,"GOTO":15,"TAG":16,"id":17,"par_izq":18,"par_der":19,"punto_y_coma":20,"return":21,"E":22,"TYPE":23,"void":24,"float":25,"int":26,"char":27,"print":28,"val_string":29,"coma":30,"include":31,"<":32,"library":33,">":34,"L_ID":35,"cor_izq":36,"val_entero":37,"cor_der":38,"=":39,"ID":40,"temporal":41,"heap":42,"stack":43,"P_Stack":44,"H_Heap":45,"BLOCK":46,"llave_izq":47,"llave_der":48,"CASTEO":49,"val_decimal":50,"if":51,"goto":52,"etiqueta":53,"dos_puntos":54,"+":55,"-":56,"*":57,"/":58,"%":59,"!=":60,"==":61,">=":62,"<=":63,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"id",18:"par_izq",19:"par_der",20:"punto_y_coma",21:"return",24:"void",25:"float",26:"int",27:"char",28:"print",29:"val_string",30:"coma",31:"include",32:"<",33:"library",34:">",36:"cor_izq",37:"val_entero",38:"cor_der",39:"=",41:"temporal",42:"heap",43:"stack",44:"P_Stack",45:"H_Heap",47:"llave_izq",48:"llave_der",50:"val_decimal",51:"if",52:"goto",53:"etiqueta",54:"dos_puntos",55:"+",56:"-",57:"*",58:"/",59:"%",60:"!=",61:"==",62:">=",63:"<="},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[12,4],[11,3],[11,2],[23,1],[23,1],[23,1],[23,1],[10,7],[7,4],[8,6],[8,5],[8,3],[35,3],[35,1],[40,1],[40,1],[40,1],[40,1],[40,1],[46,3],[46,2],[9,5],[13,7],[13,7],[13,4],[13,4],[13,4],[49,4],[49,4],[49,4],[49,4],[49,4],[49,6],[14,7],[15,3],[16,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,1],[22,1],[22,1],[22,3],[22,4],[22,4],[22,1],[22,1],[22,1],[22,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 24:
 console.log($$[$0-4]); 
break;
case 25:
 console.log($$[$0-3]); 
break;
case 26:
 console.log($$[$0-1]); 
break;
case 27:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 28:
 this.$ = []; this.$.push($$[$0]); 
break;
case 29: case 30: case 31: case 32: case 33:
 this.$ = $$[$0]; 
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V0,21:$V1,23:16,24:$V2,25:$V3,26:$V4,27:$V5,28:$V6,31:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,51:$Vd,52:$Ve,53:$Vf},{1:[3]},{5:[1,32],6:33,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V0,21:$V1,23:16,24:$V2,25:$V3,26:$V4,27:$V5,28:$V6,31:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,51:$Vd,52:$Ve,53:$Vf},{1:[2,2]},o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),{32:[1,34]},{17:[1,36],35:35,40:37,41:$Vh,42:$Vi,43:$Vj,44:$Vk,45:$Vl},{18:[1,43]},{18:$Vm,20:[1,45],22:44,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{18:[1,57]},{36:[1,58]},{36:[1,59]},{39:[1,60]},{39:[1,61]},{39:[1,62]},{18:[1,63]},{53:[1,64]},{54:[1,65]},o($Vw,[2,18]),o($Vw,[2,19]),o($Vw,[2,20]),o($Vw,[2,21]),{1:[2,1]},o($Vg,[2,3]),{33:[1,66]},{20:[1,69],30:[1,70],36:[1,67],39:[1,68]},{18:[1,71]},o($Vx,[2,28]),o($Vx,[2,29]),o($Vx,[2,30]),o($Vx,[2,31]),o($Vx,[2,32]),o($Vx,[2,33]),{29:[1,72]},{20:[1,73],32:$Vy,34:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI},o($Vg,[2,17]),{18:$Vm,22:85,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},o($VJ,[2,63]),o($VJ,[2,64]),o($VJ,[2,65]),{18:$Vm,22:86,23:87,24:$V2,25:$V3,26:$V4,27:$V5,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{36:[1,88]},{36:[1,89]},o($VJ,[2,69]),o($VJ,[2,70]),o($VJ,[2,71]),o($VJ,[2,72]),{19:[1,90]},{18:$VK,49:91},{18:$VK,49:93},{18:$Vm,22:94,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{18:$Vm,22:95,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{18:$Vm,22:96,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{18:$Vm,22:97,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{20:[1,98]},o($Vg,[2,50]),{34:[1,99]},{37:[1,100]},{37:[1,101]},o($Vg,[2,26]),{40:102,41:$Vh,42:$Vi,43:$Vj,44:$Vk,45:$Vl},{19:[1,103]},{30:[1,104]},o($Vg,[2,16]),{18:$Vm,22:105,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{18:$Vm,22:106,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{18:$Vm,22:107,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{18:$Vm,22:108,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{18:$Vm,22:109,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{18:$Vm,22:110,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{18:$Vm,22:111,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{18:$Vm,22:112,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{18:$Vm,22:113,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{18:$Vm,22:114,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{18:$Vm,22:115,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},o($VJ,[2,56]),{19:[1,116],32:$Vy,34:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI},{19:[1,117]},{18:$VK,49:118},{18:$VK,49:119},{20:[1,120]},{38:[1,121]},{23:87,24:$V2,25:$V3,26:$V4,27:$V5},{38:[1,122]},{20:[1,123],32:$Vy,34:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI},{20:[1,124],32:$Vy,34:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI},{20:[1,125],32:$Vy,34:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI},{19:[1,126],32:$Vy,34:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI},o($Vg,[2,49]),o($Vg,[2,23]),{38:[1,127]},{20:[1,128]},o($Vx,[2,27]),{46:129,47:[1,130]},{18:$Vm,22:131,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},o($VL,[2,51],{57:$VC,58:$VD,59:$VE}),o($VL,[2,52],{57:$VC,58:$VD,59:$VE}),o($VJ,[2,53]),o($VJ,[2,54]),o($VJ,[2,55]),o([19,20,60],[2,57],{32:$Vy,34:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,61:$VG,62:$VH,63:$VI}),o($VM,[2,58],{32:$Vy,34:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,62:$VH,63:$VI}),o($VM,[2,59],{32:$Vy,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,63:$VI}),o($VM,[2,60],{32:$Vy,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,63:$VI}),o($VN,[2,61],{55:$VA,56:$VB,57:$VC,58:$VD,59:$VE}),o($VN,[2,62],{55:$VA,56:$VB,57:$VC,58:$VD,59:$VE}),o($VJ,[2,66]),{18:[1,137],37:[1,135],41:[1,132],44:[1,133],45:[1,134],50:[1,136]},{38:[1,138]},{38:[1,139]},o($Vg,[2,15]),{39:[1,140]},{39:[1,141]},o($Vg,[2,39]),o($Vg,[2,40]),o($Vg,[2,41]),{52:[1,142]},{20:[1,143]},o($Vg,[2,25]),o($Vg,[2,36]),{4:144,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V0,21:$V1,23:16,24:$V2,25:$V3,26:$V4,27:$V5,28:$V6,31:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,48:[1,145],51:$Vd,52:$Ve,53:$Vf},{19:[1,146],32:$Vy,34:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI},o($VO,[2,42]),o($VO,[2,43]),o($VO,[2,44]),o($VO,[2,45]),o($VO,[2,46]),{18:$Vm,22:147,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},o($VJ,[2,67]),o($VJ,[2,68]),{18:$Vm,22:148,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{18:$Vm,22:149,29:$Vn,37:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,49:56,50:$Vu,56:$Vv},{53:[1,150]},o($Vg,[2,24]),{6:33,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V0,21:$V1,23:16,24:$V2,25:$V3,26:$V4,27:$V5,28:$V6,31:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc,48:[1,151],51:$Vd,52:$Ve,53:$Vf},o($Vg,[2,35]),{20:[1,152]},{19:[1,153],32:$Vy,34:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI},{20:[1,154],32:$Vy,34:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI},{20:[1,155],32:$Vy,34:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI},{20:[1,156]},o($Vg,[2,34]),o($Vg,[2,22]),o($VO,[2,47]),o($Vg,[2,37]),o($Vg,[2,38]),o($Vg,[2,48])],
defaultActions: {3:[2,2],32:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Omitir */
break;
case 1:/* Omitir */
break;
case 2:/* Omitir */
break;
case 3:return 55;
break;
case 4:return 56;
break;
case 5:return 57;
break;
case 6:return 58;
break;
case 7:return 59;
break;
case 8:return 62;
break;
case 9:return 34;
break;
case 10:return 63;
break;
case 11:return 32;
break;
case 12:return 61;
break;
case 13:return 60;
break;
case 14:return 39;
break;
case 15:return 20;
break;
case 16:return 54;
break;
case 17:return 18;
break;
case 18:return 19;
break;
case 19:return 47;
break;
case 20:return 48;
break;
case 21:return 36;
break;
case 22:return 38;
break;
case 23:return 30;
break;
case 24:return 24;
break;
case 25:return 25;
break;
case 26:return 27;
break;
case 27:return 26;
break;
case 28:return 51;
break;
case 29:return 21;
break;
case 30:return 31;
break;
case 31:return 33;
break;
case 32:return 52;
break;
case 33:return 28;
break;
case 34:return 43;
break;
case 35:return 42;
break;
case 36:return 44;
break;
case 37:return 45;
break;
case 38:return 50;
break;
case 39:return 37;
break;
case 40:return 29;
break;
case 41:return 41;
break;
case 42:return 53;
break;
case 43:return 17;
break;
case 44:return 5;
break;
case 45:return 'INVALID';
break;
}
},
rules: [/^(?:(\/\/.*(\r|\n|\r\n|$)))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:[\s\t\r\n]+)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:void\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:int\b)/,/^(?:if\b)/,/^(?:return\b)/,/^(?:#include\b)/,/^(?:stdio\.h\b)/,/^(?:goto\b)/,/^(?:printf\b)/,/^(?:Stack\b)/,/^(?:Heap\b)/,/^(?:P\b)/,/^(?:H\b)/,/^(?:([0-9]+\.[0-9]+))/,/^(?:([0-9]+))/,/^(?:([\"\'\`](([^\"\'\`\\])*([\\].)*)*[\"\'\`]))/,/^(?:t[0-9]+)/,/^(?:L[0-9]+)/,/^(?:([A-Za-z_\ñ\Ñ][A-Za-z_0-9\ñ\Ñ]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = C3DGrammar;
exports.Parser = C3DGrammar.Parser;
exports.parse = function () { return C3DGrammar.parse.apply(C3DGrammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}