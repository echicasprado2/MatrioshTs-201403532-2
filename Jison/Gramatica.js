/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,36],$V2=[1,34],$V3=[1,35],$V4=[1,33],$V5=[1,37],$V6=[1,23],$V7=[1,24],$V8=[1,27],$V9=[1,38],$Va=[1,39],$Vb=[1,40],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[2,5,24,34,36,37,38,43,56,57,65,71,72,77,78,79,80,84,85,86],$Vh=[1,49],$Vi=[1,53],$Vj=[1,54],$Vk=[1,59],$Vl=[1,71],$Vm=[1,73],$Vn=[1,72],$Vo=[1,65],$Vp=[1,64],$Vq=[1,66],$Vr=[1,67],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[2,35],$Vw=[1,76],$Vx=[26,61,111,112],$Vy=[2,108],$Vz=[1,80],$VA=[1,101],$VB=[2,5,23,24,34,36,37,38,43,56,57,61,65,69,71,72,77,78,79,80,84,85,86],$VC=[1,106],$VD=[2,5,23,24,34,36,37,38,43,44,50,56,57,61,65,69,71,72,77,78,79,80,84,85,86,87,88],$VE=[1,115],$VF=[2,5,23,24,29,34,36,37,38,43,44,50,56,57,65,70,71,72,77,78,79,80,84,85,86,89,90,91,92,93,94,95,96,98,99,100,101,102,103,109],$VG=[1,128],$VH=[1,129],$VI=[1,130],$VJ=[1,131],$VK=[1,132],$VL=[1,133],$VM=[1,134],$VN=[1,135],$VO=[1,136],$VP=[1,137],$VQ=[1,138],$VR=[1,139],$VS=[1,140],$VT=[1,141],$VU=[1,142],$VV=[2,5,23,24,26,29,34,36,37,38,43,44,50,56,57,65,70,71,72,77,78,79,80,84,85,86,89,90,91,92,93,94,95,96,98,99,100,101,102,103,109,111,112],$VW=[1,153],$VX=[2,24,34,36,37,38,43,56,57,71,72,77,78,79,80,86],$VY=[1,162],$VZ=[29,50,70],$V_=[1,167],$V$=[1,174],$V01=[1,170],$V11=[1,171],$V21=[1,172],$V31=[1,173],$V41=[1,179],$V51=[2,5,23,24,34,36,37,38,43,56,57,65,71,72,76,77,78,79,80,84,85,86],$V61=[1,224],$V71=[1,232],$V81=[2,5,23,24,29,34,36,37,38,40,43,50,56,57,61,65,69,71,72,77,78,79,80,84,85,86],$V91=[1,237],$Va1=[1,236],$Vb1=[23,24,50],$Vc1=[1,243],$Vd1=[2,5,23,24,29,34,36,37,38,43,44,50,56,57,65,70,71,72,77,78,79,80,84,85,86,89,90,95,96,98,99,100,101,102,103,109],$Ve1=[2,5,23,24,29,34,36,37,38,43,44,50,56,57,65,70,71,72,77,78,79,80,84,85,86,89,90,92,93,94,95,96,98,99,100,101,102,103,109],$Vf1=[2,5,23,24,29,34,36,37,38,43,44,50,56,57,65,70,71,72,77,78,79,80,84,85,86,95,96,98,99,109],$Vg1=[2,5,23,24,29,34,36,37,38,43,44,50,56,57,65,70,71,72,77,78,79,80,84,85,86,95,96,98,99,100,101,109],$Vh1=[2,5,23,24,26,29,34,36,37,38,43,44,50,56,57,61,65,69,70,71,72,77,78,79,80,84,85,86,89,90,91,92,93,94,95,96,98,99,100,101,102,103,109,111,112],$Vi1=[29,50],$Vj1=[1,289],$Vk1=[1,290],$Vl1=[2,5,24,34,36,37,38,43,56,57,65,71,72,76,77,78,79,80,84,85,86],$Vm1=[24,84,85],$Vn1=[2,5,23,24,34,36,37,38,43,50,56,57,65,71,72,77,78,79,80,84,85,86];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"SENTENCES":4,"EOF":5,"SENTENCE":6,"FUNCTION":7,"PRINT":8,"GRAPH_TS":9,"DECLARATION":10,"ASSIGNMENT":11,"TYPES":12,"SENTENCE_IF":13,"SENTENCE_WHILE":14,"SENTENCE_DO_WHILE":15,"SENTENCE_SWITCH":16,"SENTENCE_FOR":17,"RETURN":18,"BREAK":19,"CONITNUE":20,"CALL_FUNCTION":21,"ARRAY_FUNCION":22,"punto_y_coma":23,"llave_der":24,"ID_ASSIGNMENT":25,"punto":26,"pop":27,"par_izq":28,"par_der":29,"PUNTO_Y_COMA":30,"length":31,"push":32,"E":33,"identificador":34,"L_E":35,"break":36,"continue":37,"return":38,"BLOCK":39,"llave_izq":40,"FUNCTION_HEAD":41,"FUNCTION_SENTENCES":42,"function":43,"dos_puntos":44,"TYPE_FUNCTION":45,"L_PARAMETROS":46,"TYPE":47,"L_DIMENSION":48,"FUNCTION_SENTENCE":49,"coma":50,"PARAMETRO":51,"void":52,"number":53,"string":54,"boolean":55,"print":56,"graficar_ts":57,"TYPE_DECLARATION":58,"L_ID":59,"TYPE_VARIABLE":60,"=":61,"L_ARRAY":62,"L_E_TYPE":63,"E_TYPE":64,"type":65,"ATTRIBUTES_TYPE":66,"END_ATTRIBUTE_TYPE":67,"ATTRIBUTE_TYPE":68,"cor_izq":69,"cor_der":70,"let":71,"const":72,"POST_FIXED":73,"ACCESS_DIMENSION":74,"ELSE_IF":75,"else":76,"if":77,"while":78,"do":79,"switch":80,"BLOCK_SWITCH":81,"L_CASE":82,"CASE":83,"case":84,"default":85,"for":86,"in":87,"of":88,"+":89,"-":90,"**":91,"*":92,"/":93,"%":94,"&&":95,"||":96,"!":97,"!=":98,"==":99,">=":100,">":101,"<=":102,"<":103,"val_number":104,"val_string":105,"val_verdadero":106,"val_falso":107,"val_nulo":108,"?":109,"ACCESS":110,"--":111,"++":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",23:"punto_y_coma",24:"llave_der",26:"punto",27:"pop",28:"par_izq",29:"par_der",31:"length",32:"push",34:"identificador",36:"break",37:"continue",38:"return",40:"llave_izq",43:"function",44:"dos_puntos",50:"coma",52:"void",53:"number",54:"string",55:"boolean",56:"print",57:"graficar_ts",61:"=",65:"type",69:"cor_izq",70:"cor_der",71:"let",72:"const",76:"else",77:"if",78:"while",79:"do",80:"switch",84:"case",85:"default",86:"for",87:"in",88:"of",89:"+",90:"-",91:"**",92:"*",93:"/",94:"%",95:"&&",96:"||",97:"!",98:"!=",99:"==",100:">=",101:">",102:"<=",103:"<",104:"val_number",105:"val_string",106:"val_verdadero",107:"val_falso",108:"val_nulo",109:"?",111:"--",112:"++"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[22,6],[22,4],[22,7],[21,5],[21,4],[19,2],[20,2],[18,2],[18,3],[39,3],[39,2],[30,1],[30,0],[7,4],[7,3],[41,6],[41,7],[41,4],[41,5],[45,1],[45,2],[42,2],[42,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,2],[49,2],[46,3],[46,1],[51,3],[51,4],[47,1],[47,1],[47,1],[47,1],[47,1],[8,5],[9,4],[10,4],[10,6],[10,5],[10,7],[10,8],[63,3],[63,3],[63,1],[64,3],[64,5],[12,7],[66,3],[66,1],[68,3],[67,1],[67,1],[62,5],[62,3],[62,2],[58,1],[58,1],[59,3],[59,1],[60,2],[60,0],[48,3],[48,2],[11,4],[11,5],[11,3],[11,6],[25,3],[25,4],[25,2],[25,1],[74,4],[74,3],[13,3],[13,1],[75,7],[75,5],[14,6],[15,7],[16,5],[81,3],[81,2],[82,2],[82,1],[83,4],[83,3],[83,3],[83,2],[17,12],[17,11],[17,9],[17,8],[17,8],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,1],[33,1],[33,1],[33,1],[33,3],[33,3],[33,5],[33,3],[33,4],[33,2],[33,5],[33,3],[33,6],[33,1],[110,3],[110,4],[110,1],[110,2],[73,1],[73,1],[35,3],[35,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 3: case 120:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: case 64: case 81: case 86: case 96: case 121: case 169:
 this.$ = []; this.$.push($$[$0]); 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 42: case 88: case 89: case 97:
 this.$ = $$[$0]; 
break;
case 21: case 22:
 ErrorList.addError(new ErrorNode(this._$.first_line,this._$.first_column,new ErrorType(EnumErrorType.SYNTACTIC),` Error sintactico `,new EnvironmentType(EnumEnvironmentType.NULL, ""))); this.$ = new InstructionError(); 
break;
case 23:
 this.$ = new ArrayFunction(this._$.first_line,this._$.first_column,new TypeArrayMethod(EnumTypeArrayMethod.POP),new Access(this._$.first_line,this._$.first_column,$$[$0-5]),null,true); 
break;
case 24:
 this.$ = new ArrayFunction(this._$.first_line,this._$.first_column,new TypeArrayMethod(EnumTypeArrayMethod.LENGTH),new Access(this._$.first_line,this._$.first_column,$$[$0-3]),null,true); 
break;
case 25:
 this.$ = new ArrayFunction(this._$.first_line,this._$.first_column,new TypeArrayMethod(EnumTypeArrayMethod.PUSH),new Access(this._$.first_line,this._$.first_column,$$[$0-6]),$$[$0-2],true); 
break;
case 26:
 this.$ = new CallFunction(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-2],true); 
break;
case 27:
 this.$ = new CallFunction(this._$.first_line,this._$.first_column,$$[$0-3],[],true); 
break;
case 28:
 this.$ = new Break(this._$.first_line,this._$.first_column); 
break;
case 29:
 this.$ = new Continue(this._$.first_line,this._$.first_column); 
break;
case 30:
 this.$ = new Return(this._$.first_line,this._$.first_column,null,false); 
break;
case 31:
 this.$ = new Return(this._$.first_line,this._$.first_column,$$[$0-1],true); 
break;
case 32:
 this.$ = new Block($$[$0-1]); 
break;
case 33:
 this.$ = new Block([]); 
break;
case 34: case 35:
 this.$ = ";"; 
break;
case 36:
 this.$ = $$[$0-3]; 
break;
case 37:
 this.$ = $$[$0-2]; 
break;
case 38:
 this.$ = new Function(this._$.first_line,this._$.first_column,$$[$0-4],[],$$[$0]); 
break;
case 39:
 this.$ = new Function(this._$.first_line,this._$.first_column,$$[$0-5],$$[$0-3],$$[$0]); 
break;
case 40:
 this.$ = new Function(this._$.first_line,this._$.first_column,$$[$0-2],[],new Type(EnumType.VOID,"")); 
break;
case 41:
 this.$ = new Function(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1],new Type(EnumType.VOID,"")); 
break;
case 43:
 this.$ = $$[$0-1]; this.$.identifier = `${this.$.enumType}_${$$[$0]}`; this.$.enumType = EnumType.ARRAY; 
break;
case 44: case 45:
 
break;
case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:
 
                        stack = eval('$$');
                        for(var i = stack.length-2;i > 0; i--){
                                if(stack[i] === '{' && stack[i-1] instanceof Function){
                                        stack[i-1].addInstruction(stack[stack.length -1]);
                                        break;
                                }
                        }
                
break;
case 58:

                        stack = eval('$$');
                        for(var i = stack.length-2;i > 0; i--){
                                if(stack[i] === '{' && stack[i-1] instanceof Function){
                                        stack[i-1].addInstruction(stack[stack.length -1]);
                                        break;
                                }
                        }
                
break;
case 59:
 
                        stack = eval('$$');
                        for(var i = stack.length-2;i > 0; i--){
                                if(stack[i] === '{' && stack[i-1] instanceof Function){
                                        stack[i-1].addFunction(stack[stack.length - 1]);
                                        break;
                                }
                        }       
                
break;
case 60:

                        stack = eval('$$');
                        for(var i = stack.length-2;i > 0; i--){
                                if(stack[i] === '{' && stack[i-1] instanceof Function){
                                        stack[i-1].addFunction(stack[stack.length - 1]);
                                        break;
                                }
                        }
                
break;
case 61: case 62:
 
                        ErrorList.addError(new ErrorNode(this._$.first_line,this._$.first_column,new ErrorType(EnumErrorType.SYNTACTIC),` Error sintactico `,new EnvironmentType(EnumEnvironmentType.NULL, ""))); this.$ = new InstructionError(); 
                
break;
case 63: case 79: case 80: case 85: case 95:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 65:
 this.$ = new Parameter(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0],null,false,0); 
break;
case 66:
 this.$ = new Parameter(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1],null,true,$$[$0]); 
break;
case 67:
 this.$ = new Type(EnumType.VOID,""); 
break;
case 68:
 this.$ = new Type(EnumType.NUMBER,""); 
break;
case 69:
 this.$ = new Type(EnumType.STRING,""); 
break;
case 70:
 this.$ = new Type(EnumType.BOOLEAN,""); 
break;
case 71:
 this.$ = new Type(EnumType.TYPE,$$[$0]); 
break;
case 72:
 this.$ = new Print(this._$.first_line,this._$.first_column,$$[$0-2]); 
break;
case 73:
 this.$ = new GraphTs(this._$.first_line,this.$.first_column); 
break;
case 74:
 this.$ = new Declaration(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],$$[$0-1],null); 
break;
case 75:
 this.$ = new Declaration(this._$.first_line,this._$.first_column,$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]); 
break;
case 76:
 this.$ = new DeclarationArray(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null); 
break;
case 77:
 this.$ = new DeclarationArray(this._$.first_line,this._$.first_column,$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],new Value(new Type(EnumType.ARRAY,""),$$[$0-1])); 
break;
case 78:
 this.$ = new DeclarationTypes(this._$.first_line,this._$.first_column,$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-2]); 
break;
case 82:
 this.$ = new AttributeTypeAssignment(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]); 
break;
case 83:
 this.$ = new TypeAssignment(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-1]);
break;
case 84:
 this.$ = new TypeDefinition(this._$.first_line,this._$.first_column,$$[$0-5],$$[$0-2]); 
break;
case 87:
 this.$ = new TypeAttributeDefinition(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]); 
break;
case 90:
 this.$ = $$[$0-4]; this.$.push($$[$0-2]); 
break;
case 91: case 110:
 this.$ = []; this.$.push($$[$0-1]); 
break;
case 92:
 this.$ = []; this.$.push([new Value(new Type(EnumType.NULL),[])]); 
break;
case 93:
 this.$ = new DeclarationType(EnumDeclarationType.LET); 
break;
case 94:
 this.$ = new DeclarationType(EnumDeclarationType.CONST); 
break;
case 98:
 this.$ = new Type(EnumType.NULL,""); 
break;
case 99:
 this.$ = $$[$0-2] + 1; 
break;
case 100:
 this.$ = 1; 
break;
case 101:
 
                for(var i = 0; i < $$[$0-3].length;i++){
                        if($$[$0-3][i] instanceof AccessArray){
                                this.$ = new AssignmentArray(this._$.first_line,this.$.first_column,$$[$0-3],$$[$0-1]);
                                return;
                        }
                }
                this.$ = new Assignment(this._$.first_line,this.$.first_column,$$[$0-3],$$[$0-1]); 
        
break;
case 102:

                for(var i = 0; i < $$[$0-4].length;i++){
                        if($$[$0-4][i] instanceof AccessArray){
                                this.$ = new AssignmentArray(this._$.first_line,this.$.first_column,$$[$0-4],new Value(new Type(EnumType.NULL),[]));
                                return;
                        }
                }
                this.$ = new Assignment(this._$.first_line,this.$.first_column,$$[$0-4],new Value(new Type(EnumType.NULL),""));
        
break;
case 103:
 this.$ = new Unary(this._$.first_line,this._$.first_column,$$[$0-1],new Access(this._$.first_line,this._$.first_column,$$[$0-2]),true); 
break;
case 104:
 this.$ = new AssignmentType(this._$.first_line,this._$.first_column,$$[$0-5],$$[$0-2]); 
break;
case 105: case 162:
 this.$ = $$[$0-2]; this.$.push(new Id(this._$.first_line,this._$.first_column,$$[$0])); 
break;
case 106: case 163:
 this.$ = $$[$0-3]; this.$.push(new AccessArray(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0])); 
break;
case 107: case 165:
 this.$ = []; this.$.push(new AccessArray(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0])); 
break;
case 108: case 164:
 this.$ = []; this.$.push(new Id(this._$.first_line,this._$.first_column,$$[$0])); 
break;
case 109:
 this.$ = $$[$0-3]; this.$.push($$[$0-1]); 
break;
case 111:
 this.$ = new If(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0],true); 
break;
case 112:
 this.$ = new If(this._$.first_line,this._$.first_column,$$[$0],"",false); 
break;
case 113:
 this.$ = $$[$0-6]; this.$.push(new BlockIf(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0],true)); 
break;
case 114:
 this.$ = []; this.$.push(new BlockIf(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0],false)); 
break;
case 115:
this.$ = new While(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1]); 
break;
case 116:
this.$ = new Do(this._$.first_line,this._$.first_column,$$[$0-5],$$[$0-2]); 
break;
case 117:
 this.$ = new Switch(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]); 
break;
case 118: case 153:
 this.$ = $$[$0-1]; 
break;
case 119:
 this.$ = []; 
break;
case 122:
 this.$ = new CaseSwitch(this._$.first_line,this._$.first_column,$$[$0-2],new Block($$[$0]),true,true); 
break;
case 123:
 this.$ = new CaseSwitch(this._$.first_line,this._$.first_column,$$[$0-1],new Block([]),true,false); 
break;
case 124:
 this.$ = new CaseSwitch(this._$.first_line,this._$.first_column,"",new Block($$[$0]),false,true); 
break;
case 125:
 this.$ = new CaseSwitch(this._$.first_line,this._$.first_column,"",new Block([]),false,false); 
break;
case 126:
 this.$ = new For(
                this._$.first_line,
                this._$.first_column,
                new Declaration(
                        this._$.first_line,
                        this._$.first_column,
                        $$[$0-9],
                        $$[$0-8],
                        new Type(EnumType.NULL,null),
                        $$[$0-6]),
                $$[$0-4],
                $$[$0-2],
                $$[$0]); 
        
break;
case 127:
 this.$ = new For(
                this._$.first_line,
                this._$.first_column,
                new Assignment(this._$.first_line,
                        this.$.first_column,
                        $$[$0-8],
                        $$[$0-6]),
                $$[$0-4],
                $$[$0-2],
                $$[$0]); 
        
break;
case 128:
 this.$ = new For(
                this._$.first_line,
                this._$.first_column,
                new Id(this._$.first_line,this._$.first_column,$$[$0-6]),
                $$[$0-4],
                $$[$0-2],
                $$[$0]); 
        
break;
case 129:
 this.$ = new ForIn(
                this._$.first_line,
                this._$.first_column,
                new Declaration(
                        this._$.first_line,
                        this._$.first_column,
                        $$[$0-5],
                        $$[$0-4],
                        new Type(EnumType.NULL,null),
                        null),
                $$[$0-2],
                $$[$0]);
        
break;
case 130:
 this.$ = new ForOf(
                this._$.first_line,
                this._$.first_column,
                new Declaration(
                        this._$.first_line,
                        this._$.first_column,
                        $$[$0-5],
                        $$[$0-4],
                        new Type(EnumType.NULL,null),
                        null),
                $$[$0-2],
                $$[$0]);
        
break;
case 131:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.PLUS),$$[$0-2],$$[$0]); 
break;
case 132:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MINUS),$$[$0-2],$$[$0]); 
break;
case 133:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.POWER),$$[$0-2],$$[$0]); 
break;
case 134:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MULTIPLICATION),$$[$0-2],$$[$0]); 
break;
case 135:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.DIVISION),$$[$0-2],$$[$0]); 
break;
case 136:
 this.$ = new Arithmetic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MODULE),$$[$0-2],$$[$0]); 
break;
case 137:
 this.$ = new Logic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.AND),$$[$0-2],$$[$0]); 
break;
case 138:
 this.$ = new Logic(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.OR),$$[$0-2],$$[$0]); 
break;
case 139:
 this.$ = new Unary(this._$.first_line, this._$.first_column, new OperationType(EnumOperationType.NOT), $$[$0],false); 
break;
case 140:
 this.$ = new Unary(this._$.first_line, this._$.first_column, new OperationType(EnumOperationType.NEGATIVE), $$[$0],false);
break;
case 141:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.DIFFERENT_THAN),$$[$0-2],$$[$0]); 
break;
case 142:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.LIKE_THAN),$$[$0-2],$$[$0]); 
break;
case 143:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MORE_EQUAL_TO),$$[$0-2],$$[$0]); 
break;
case 144:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.MORE_THAN),$$[$0-2],$$[$0]); 
break;
case 145:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.LESS_EQUAL_TO),$$[$0-2],$$[$0]); 
break;
case 146:
 this.$ = new Relational(this._$.first_line,this._$.first_column,new OperationType(EnumOperationType.LESS_THAN),$$[$0-2],$$[$0]); 
break;
case 147:
 this.$ = new Value(new Type(EnumType.NUMBER,""),$$[$0]); 
break;
case 148:
 this.$ = new Value(new Type(EnumType.STRING,""),$$[$0]); 
break;
case 149: case 150:
 this.$ = new Value(new Type(EnumType.BOOLEAN,""),$$[$0]); 
break;
case 151:
 this.$ = new Value(new Type(EnumType.NULL,""),$$[$0]); 
break;
case 152:
 this.$ = $$[$0-1]; this.$.parentesis = true; 
break;
case 154:
 this.$ = new Ternary(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-2],$$[$0]); 
break;
case 155:
 this.$ = new CallFunction(this._$.first_line,this._$.first_column,$$[$0-2],[],false); 
break;
case 156:
 this.$ = new CallFunction(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1],false); 
break;
case 157:
 this.$ = new Unary(this._$.first_line,this._$.first_column,$$[$0],new Access(this._$.first_line,this._$.first_column,$$[$0-1]),false); 
break;
case 158:
 this.$ = new ArrayFunction(this._$.first_line,this._$.first_column,new TypeArrayMethod(EnumTypeArrayMethod.POP),new Access(this._$.first_line,this._$.first_column,$$[$0-4]),null,false); 
break;
case 159:
 this.$ = new ArrayFunction(this._$.first_line,this._$.first_column,new TypeArrayMethod(EnumTypeArrayMethod.LENGTH),new Access(this._$.first_line,this._$.first_column,$$[$0-2]),null,false); 
break;
case 160:
 this.$ = new ArrayFunction(this._$.first_line,this._$.first_column,new TypeArrayMethod(EnumTypeArrayMethod.PUSH),new Access(this._$.first_line,this._$.first_column,$$[$0-5]),$$[$0-1],false); 
break;
case 161:
 this.$ = new Access(this._$.first_line,this._$.first_column,$$[$0]); 
break;
case 166:
 this.$ = new OperationType(EnumOperationType.MINUS_MINUS); 
break;
case 167:
 this.$ = new OperationType(EnumOperationType.PLUS_PLUS); 
break;
case 168:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,25:26,34:$V1,36:$V2,37:$V3,38:$V4,41:22,43:$V5,56:$V6,57:$V7,58:25,65:$V8,71:$V9,72:$Va,75:28,77:$Vb,78:$Vc,79:$Vd,80:$Ve,86:$Vf},{1:[3]},{2:$V0,5:[1,41],6:42,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,25:26,34:$V1,36:$V2,37:$V3,38:$V4,41:22,43:$V5,56:$V6,57:$V7,58:25,65:$V8,71:$V9,72:$Va,75:28,77:$Vb,78:$Vc,79:$Vd,80:$Ve,86:$Vf},{1:[2,2]},o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),o($Vg,[2,20]),{23:[1,43],24:[1,44]},{40:[1,45]},{28:[1,46]},{28:[1,47]},{34:$Vh,59:48},{26:[1,52],61:[1,50],73:51,111:$Vi,112:$Vj},{34:[1,55]},o($Vg,[2,112],{76:[1,56]}),{28:[1,57]},{39:58,40:$Vk},{28:[1,60]},{28:[1,61]},{23:[1,62],28:$Vl,33:63,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($Vg,$Vv,{30:75,23:$Vw}),o($Vg,$Vv,{30:77,23:$Vw}),o($Vx,$Vy,{74:79,28:[1,78],69:$Vz}),{34:[1,81]},{34:[2,93]},{34:[2,94]},{28:[1,82]},{1:[2,1]},o($Vg,[2,3]),o($Vg,[2,21]),o($Vg,[2,22]),{2:$VA,7:99,8:86,9:87,10:88,11:89,13:90,14:91,15:92,16:93,17:94,18:95,19:96,20:97,21:98,22:100,24:[1,84],25:26,34:$V1,36:$V2,37:$V3,38:$V4,41:22,42:83,43:$V5,49:85,56:$V6,57:$V7,58:25,71:$V9,72:$Va,75:28,77:$Vb,78:$Vc,79:$Vd,80:$Ve,86:$Vf},{28:$Vl,33:103,34:$Vm,35:102,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{29:[1,104]},o($VB,[2,98],{60:105,44:[1,107],50:$VC}),o($VD,[2,96]),{28:$Vl,33:108,34:$Vm,40:[1,110],69:[1,109],90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($Vg,$Vv,{30:111,23:$Vw}),{27:[1,112],31:[1,113],32:[1,114],34:$VE},o($VF,[2,166]),o($VF,[2,167]),{61:[1,116]},{39:117,40:$Vk,77:[1,118]},{28:$Vl,33:119,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{78:[1,120]},{2:$V0,4:121,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,24:[1,122],25:26,34:$V1,36:$V2,37:$V3,38:$V4,41:22,43:$V5,56:$V6,57:$V7,58:25,65:$V8,71:$V9,72:$Va,75:28,77:$Vb,78:$Vc,79:$Vd,80:$Ve,86:$Vf},{28:$Vl,33:123,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{25:125,34:[1,126],58:124,71:$V9,72:$Va},o($Vg,[2,30]),{23:[1,127],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},{28:$Vl,33:143,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:144,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($VF,[2,147]),o($VF,[2,148]),o($VF,[2,149]),o($VF,[2,150]),o($VF,[2,151]),{28:$Vl,33:145,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:103,34:$Vm,35:146,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($VV,[2,164],{74:148,28:[1,147],69:$Vz}),o($VF,[2,161],{73:149,26:[1,150],111:$Vi,112:$Vj}),o($Vg,[2,28]),o($Vg,[2,34]),o($Vg,[2,29]),{28:$Vl,29:[1,152],33:103,34:$Vm,35:151,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($Vx,[2,107],{69:$VW}),{28:$Vl,33:154,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:[1,155]},{28:$Vl,33:156,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{24:[1,157]},o($Vg,[2,37]),{2:$VA,7:99,8:86,9:87,10:88,11:89,13:90,14:91,15:92,16:93,17:94,18:95,19:96,20:97,21:98,22:100,24:[2,45],25:26,34:$V1,36:$V2,37:$V3,38:$V4,41:22,42:158,43:$V5,49:85,56:$V6,57:$V7,58:25,71:$V9,72:$Va,75:28,77:$Vb,78:$Vc,79:$Vd,80:$Ve,86:$Vf},o($VX,[2,46]),o($VX,[2,47]),o($VX,[2,48]),o($VX,[2,49]),o($VX,[2,50]),o($VX,[2,51]),o($VX,[2,52]),o($VX,[2,53]),o($VX,[2,54]),o($VX,[2,55]),o($VX,[2,56]),o($VX,[2,57]),o($VX,[2,58]),o($VX,[2,59]),o($VX,[2,60]),{23:[1,159],24:[1,160]},{29:[1,161],50:$VY},o($VZ,[2,169],{89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU}),o($Vg,$Vv,{30:163,23:$Vw}),o($Vg,$Vv,{30:164,48:166,23:$Vw,61:[1,165],69:$V_}),{34:[1,168]},{34:$V$,47:169,52:$V01,53:$V11,54:$V21,55:$V31},o($Vg,$Vv,{30:175,23:$Vw,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU}),{28:$Vl,33:103,34:$Vm,35:146,69:$Vn,70:[1,176],90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{34:$V41,63:177,64:178},o($Vg,[2,103]),{28:[1,180]},o($Vg,$Vv,{30:181,23:$Vw}),{28:[1,182]},o($Vx,[2,105],{74:183,69:$Vz}),{40:[1,184]},o($Vg,[2,111]),{28:[1,185]},{29:[1,186],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},{28:[1,187]},{2:$V0,6:42,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,24:[1,188],25:26,34:$V1,36:$V2,37:$V3,38:$V4,41:22,43:$V5,56:$V6,57:$V7,58:25,65:$V8,71:$V9,72:$Va,75:28,77:$Vb,78:$Vc,79:$Vd,80:$Ve,86:$Vf},o($V51,[2,33]),{29:[1,189],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},{34:$Vh,59:190},{26:[1,192],61:[1,191]},o([26,61],$Vy,{74:79,23:[1,193],69:$Vz}),o($Vg,[2,31]),{28:$Vl,33:194,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:195,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:196,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:197,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:198,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:199,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:200,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:201,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:202,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:203,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:204,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:205,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:206,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:207,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:208,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($VF,[2,139]),o($VF,[2,140]),{29:[1,209],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},{50:$VY,70:[1,210]},{28:$Vl,29:[1,211],33:103,34:$Vm,35:212,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($VV,[2,165],{69:$VW}),o($VF,[2,157]),{27:[1,213],31:[1,214],32:[1,215],34:[1,216]},{29:[1,217],50:$VY},o($Vg,$Vv,{30:218,23:$Vw}),{28:$Vl,33:219,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{70:[1,220],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},{29:[1,221],34:$V61,46:222,51:223},{29:[1,225],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},o($Vg,[2,36]),{24:[2,44]},o($VX,[2,61]),o($VX,[2,62]),o($Vg,$Vv,{30:226,23:$Vw}),{28:$Vl,33:227,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($Vg,[2,73]),o($Vg,[2,74]),{28:$Vl,33:228,34:$Vm,40:[1,229],69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($Vg,$Vv,{30:230,23:$Vw,61:[1,231],69:$V71}),{70:[1,233]},o($VD,[2,95]),o($VB,[2,97]),o($V81,[2,67]),o($V81,[2,68]),o($V81,[2,69]),o($V81,[2,70]),o($V81,[2,71]),o($Vg,[2,101]),o($Vg,$Vv,{30:234,23:$Vw}),{23:$V91,24:[1,235],50:$Va1},o($Vb1,[2,81]),{44:[1,238]},{29:[1,239]},o($Vg,[2,24]),{28:$Vl,33:240,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($Vx,[2,106],{69:$VW}),{34:$Vc1,66:241,68:242},{28:$Vl,33:244,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{39:245,40:$Vk},{28:$Vl,33:246,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($V51,[2,32]),{40:[1,248],81:247},{50:$VC,61:[1,249],87:[1,250],88:[1,251]},{28:$Vl,33:252,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{34:$VE},{28:$Vl,33:253,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($Vd1,[2,131],{91:$VI,92:$VJ,93:$VK,94:$VL}),o($Vd1,[2,132],{91:$VI,92:$VJ,93:$VK,94:$VL}),o($Ve1,[2,133],{91:$VI}),o($Ve1,[2,134],{91:$VI}),o($Ve1,[2,135],{91:$VI}),o($Ve1,[2,136],{91:$VI}),o([2,5,23,24,29,34,36,37,38,43,44,50,56,57,65,70,71,72,77,78,79,80,84,85,86,95,96,109],[2,137],{89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT}),o([2,5,23,24,29,34,36,37,38,43,44,50,56,57,65,70,71,72,77,78,79,80,84,85,86,96,109],[2,138],{89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT}),o([2,5,23,24,29,34,36,37,38,43,44,50,56,57,65,70,71,72,77,78,79,80,84,85,86,95,96,98,109],[2,141],{89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT}),o($Vf1,[2,142],{89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,100:$VQ,101:$VR,102:$VS,103:$VT}),o($Vf1,[2,143],{89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,102:$VS,103:$VT}),o($Vf1,[2,144],{89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,102:$VS,103:$VT}),o($Vg1,[2,145],{89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),o($Vg1,[2,146],{89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),{44:[1,254],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},o($VF,[2,152]),o($VF,[2,153]),o($VF,[2,155]),{29:[1,255],50:$VY},{28:[1,256]},o($VF,[2,159]),{28:[1,257]},o($VV,[2,162],{74:258,69:$Vz}),o($Vg,$Vv,{30:259,23:$Vw}),o($Vg,[2,27]),{70:[1,260],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},o($Vh1,[2,110]),{40:[2,40],44:[1,261]},{29:[1,262],50:[1,263]},o($Vi1,[2,64]),{44:[1,264]},{39:265,40:$Vk},o($Vg,[2,72]),o($VZ,[2,168],{89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU}),o($Vg,$Vv,{30:266,23:$Vw,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU}),{34:$V41,63:267,64:178},o($Vg,[2,76]),{62:268,69:[1,269]},{70:[1,270]},o($V81,[2,100]),o($Vg,[2,102]),o($Vg,$Vv,{30:271,23:$Vw}),{34:$V41,64:272},{34:$V41,64:273},{28:$Vl,33:274,34:$Vm,40:[1,275],69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($Vg,$Vv,{30:276,23:$Vw}),{29:[1,277],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},{23:[1,281],24:[1,278],50:[1,280],67:279},o($Vb1,[2,86]),{44:[1,282]},{29:[1,283],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},o($Vg,$Vv,{30:284,23:$Vw}),{29:[1,285],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},o($Vg,[2,117]),{24:[1,287],82:286,83:288,84:$Vj1,85:$Vk1},{28:$Vl,33:291,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:292,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:293,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{23:[1,294],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},{23:[1,295],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},{28:$Vl,33:296,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($VF,[2,156]),{29:[1,297]},{28:$Vl,33:298,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($VV,[2,163],{69:$VW}),o($Vg,[2,26]),o($Vh1,[2,109]),{34:$V$,45:299,47:300,52:$V01,53:$V11,54:$V21,55:$V31},{40:[2,41],44:[1,301]},{34:$V61,51:302},{34:$V$,47:303,52:$V01,53:$V11,54:$V21,55:$V31},o($Vl1,[2,114]),o($Vg,[2,75]),{23:$V91,24:[1,304],50:$Va1},o($Vg,$Vv,{30:305,23:$Vw,50:[1,306]}),{28:$Vl,33:103,34:$Vm,35:307,69:$Vn,70:[1,308],90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($V81,[2,99]),o($Vg,[2,104]),o($Vb1,[2,79]),o($Vb1,[2,80]),o($Vb1,[2,82],{89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU}),{34:$V41,63:309,64:178},o($Vg,[2,23]),o($Vg,$Vv,{30:310,23:$Vw}),o($Vg,$Vv,{30:311,23:$Vw}),{34:$Vc1,68:312},{34:[2,88]},{34:[2,89]},{34:$V$,47:313,52:$V01,53:$V11,54:$V21,55:$V31},{39:314,40:$Vk},o($Vg,[2,115]),{23:[1,315]},{24:[1,316],83:317,84:$Vj1,85:$Vk1},o($Vg,[2,119]),o($Vm1,[2,121]),{28:$Vl,33:318,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{44:[1,319]},{23:[1,320],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},{29:[1,321],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},{29:[1,322],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},{28:$Vl,33:323,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{28:$Vl,33:324,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o([2,5,23,24,29,34,36,37,38,43,44,50,56,57,65,70,71,72,77,78,79,80,84,85,86],[2,154],{89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU}),o($VF,[2,158]),{29:[1,325],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},{40:[2,38]},{40:[2,42],48:326,69:$V_},{34:$V$,45:327,47:300,52:$V01,53:$V11,54:$V21,55:$V31},o($Vi1,[2,63]),o($Vi1,[2,65],{48:328,69:$V_}),o($Vg,$Vv,{30:329,23:$Vw}),o($Vg,[2,77]),{69:[1,330]},{50:$VY,70:[1,331]},o($Vn1,[2,92]),{23:$V91,24:[1,332],50:$Va1},o($Vg,[2,25]),o($Vg,[2,84]),o($Vb1,[2,85]),o($Vb1,[2,87]),o($Vl1,[2,113]),o($Vg,[2,116]),o($Vg,[2,118]),o($Vm1,[2,120]),{44:[1,333],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},o($Vm1,[2,125],{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,41:22,58:25,25:26,75:28,4:334,2:$V0,34:$V1,36:$V2,37:$V3,38:$V4,43:$V5,56:$V6,57:$V7,65:$V8,71:$V9,72:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,86:$Vf}),{28:$Vl,33:335,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{39:336,40:$Vk},{39:337,40:$Vk},{23:[1,338],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},{29:[1,339],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},o($VF,[2,160]),{40:[2,43],69:$V71},{40:[2,39]},o($Vi1,[2,66],{69:$V71}),o($Vg,[2,78]),{28:$Vl,33:103,34:$Vm,35:340,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},o($Vn1,[2,91]),o($Vb1,[2,83]),o($Vm1,[2,123],{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,41:22,58:25,25:26,75:28,4:341,2:$V0,34:$V1,36:$V2,37:$V3,38:$V4,43:$V5,56:$V6,57:$V7,65:$V8,71:$V9,72:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,86:$Vf}),o($Vm1,[2,124],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,41:22,58:25,25:26,75:28,6:42,2:$V0,34:$V1,36:$V2,37:$V3,38:$V4,43:$V5,56:$V6,57:$V7,65:$V8,71:$V9,72:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,86:$Vf}),{23:[1,342],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},o($Vg,[2,129]),o($Vg,[2,130]),{28:$Vl,33:343,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{39:344,40:$Vk},{50:$VY,70:[1,345]},o($Vm1,[2,122],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,41:22,58:25,25:26,75:28,6:42,2:$V0,34:$V1,36:$V2,37:$V3,38:$V4,43:$V5,56:$V6,57:$V7,65:$V8,71:$V9,72:$Va,77:$Vb,78:$Vc,79:$Vd,80:$Ve,86:$Vf}),{28:$Vl,33:346,34:$Vm,69:$Vn,90:$Vo,97:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,110:74},{29:[1,347],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},o($Vg,[2,128]),o($Vn1,[2,90]),{29:[1,348],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,109:$VU},{39:349,40:$Vk},{39:350,40:$Vk},o($Vg,[2,127]),o($Vg,[2,126])],
defaultActions: {3:[2,2],38:[2,93],39:[2,94],41:[2,1],158:[2,44],280:[2,88],281:[2,89],299:[2,38],327:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Omitir */
break;
case 1:/* Omitir */
break;
case 2:/* Omitir */
break;
case 3:return 112;
break;
case 4:return 111;
break;
case 5:return 91;
break;
case 6:return 89;
break;
case 7:return 90;
break;
case 8:return 92;
break;
case 9:return 93;
break;
case 10:return 94;
break;
case 11:return 108;
break;
case 12:return 106;
break;
case 13:return 107;
break;
case 14:return 100;
break;
case 15:return 101;
break;
case 16:return 102;
break;
case 17:return 103;
break;
case 18:return 99;
break;
case 19:return 98;
break;
case 20:return 61;
break;
case 21:return 95;
break;
case 22:return 96;
break;
case 23:return 97;
break;
case 24:return 23;
break;
case 25:return 44;
break;
case 26:return 26;
break;
case 27:return 28;
break;
case 28:return 29;
break;
case 29:return 40;
break;
case 30:return 24;
break;
case 31:return 69;
break;
case 32:return 70;
break;
case 33:return 50;
break;
case 34:return 109;
break;
case 35:return 54
break;
case 36:return 53;
break;
case 37:return 52;
break;
case 38:return 55;
break;
case 39:return 65;
break;
case 40:return 72;
break;
case 41:return 71;
break;
case 42:return 32;
break;
case 43:return 27;
break;
case 44:return 31;
break;
case 45:return 77;
break;
case 46:return 76;
break;
case 47:return 80;
break;
case 48:return 84;
break;
case 49:return 85;
break;
case 50:return 36;
break;
case 51:return 37;
break;
case 52:return 38;
break;
case 53:return 86;
break;
case 54:return 88;
break;
case 55:return 87;
break;
case 56:return 78;
break;
case 57:return 79;
break;
case 58:return 56;
break;
case 59:return 57;
break;
case 60:return 43;
break;
case 61:return 104;
break;
case 62:return 105;
break;
case 63:return 34;
break;
case 64:return 5;
break;
case 65: ErrorList.addError(new ErrorNode(yy_.yylloc.first_line,yy_.yylloc.first_column,new ErrorType(EnumErrorType.LEXICO),`El caracter: "${yy_.yytext}" no pertenece al lenguaje`,new EnvironmentType(EnumEnvironmentType.NULL, ""))); 
break;
}
},
rules: [/^(?:(\/\/.*(\r|\n|\r\n|$)))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:[\s\t\r\n]+)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\?)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:void\b)/,/^(?:boolean\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:function\b)/,/^(?:([0-9]+(\.[0-9]+)?\b))/,/^(?:([\"\'\`](([^\"\'\`\\])*([\\].)*)*[\"\'\`]))/,/^(?:([A-Za-z_\ñ\Ñ][A-Za-z_0-9\ñ\Ñ]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}